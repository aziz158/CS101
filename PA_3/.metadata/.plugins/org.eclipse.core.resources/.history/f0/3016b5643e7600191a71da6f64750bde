
public class Matrix {
	
	
	private class Entry
	{	
		int column;
		double data;
		
		Entry(int col, double dat)
		{
			column = col;
			data = dat;
		}
		
		public String toString()
		{
			return "(" + String.valueOf(column) + ", " + String.valueOf(data)+ ")";
		}
		
		public boolean equals(Object x)
		{
		    boolean eq  = false;
		    Entry E;
		    if(x instanceof Entry)
		    {
		        E = (Entry)x;
		        eq = (this.column ==E.column && this.data == E.data);
		    }
		    return eq;
		}
		
	}
	
	private int size;
	private int NZNumbers;
	private List[] row;

	Matrix(int n)
	{
		row = new List[n];
		for(int i=0; i<n; i++)
		{
			row[i] = new List();
		}

		this.size = n;
	}
	
	int getSize()
	{
		return this.size;
	}
	
	int getNNZ()
	{
		return this.NZNumbers;
	}
	
	void changeEntry(int i, int j, double x)
	{
		Entry E = new Entry(j, x);
		
		if(x != 0)
		{	
			if(this.row[i-1].isEmpty() || this.row[i-1].length() < j)
			{ this.row[i-1].append(E); this.NZNumbers++;}
			else
			{
				this.row[i-1].moveFront();
				while(this.row[i-1].index() >= 0 )
				{
					Entry temp = (Entry)this.row[i-1].get();
					if(temp.column < E.column)
					{
						this.row[i-1].moveNext();
					}
					else
					{
						if(E.column == temp.column)
						{
							this.row[i-1].insertBefore(E);
							this.row[i-1].delete();
						}
						else
						{ this.row[i-1].insertBefore(E); this.NZNumbers++;}
						break;
					}
				}
			}
		}
		else
		{
			this.row[i-1].moveFront();
			while(this.row[i-1].index() >= 0 )
			{
				Entry temp = (Entry)this.row[i-1].get();
				if(temp.column < E.column)
				{
					this.row[i-1].moveNext();
				}
				else
				{
					if(temp.column == E.column)
					{
						this.row[i-1].delete();
						this.NZNumbers--;
					}
					break;
				}
			}
		}
	}
	
	public String toString()
	{
		String temp = "";
		for(int i = 0; i < this.size; i++)
		{
			if(this.row[i].isEmpty()) break;
			temp += String.valueOf(i+1) + ": " + this.row[i].toString() + "\n"; 
		}
		
		return temp;
	}
	
	
	Matrix clear()
	{
		Matrix N = new Matrix(this.size);
		
		return N;
	}
	
	
	Matrix scalarMult(double x)
	{
		Matrix N = new Matrix(this.size);
		if(x == 0)
		{ return N = this.clear();}
		else
		{
			for(int i = 0; i < this.size; i++)
			{
				this.row[i].moveFront();
				for(int j = 0; j < this.row[i].length(); j++)
				{
					
					Entry e =(Entry)(this.row[i].get());
					N.changeEntry(i+1, j+1, e.data * x);
					this.row[i].moveNext();
				}
			}
			return N;
		}
	}
	
	List listAdd(List L, List M)
	{
		List N = new List();
		L.moveFront();
		M.moveFront();
		int col;
		
		for(int i = 0; i < L.length(); i++)
		{
			Entry e1 = (Entry) L.get();
			Entry e2 = (Entry) M.get();
			col = i+1;
			System.out.println(i);
			System.out.println(e1);
			System.out.println(e2);
			if(e1.column == e2.column)
			{
				Entry e3 = new Entry(i+1, e1.data + e2.data);
				N.append(e3);
			}
			else if(e1.column < e2.column)
				N.append(e2);
			else
				N.append(e1);
			
			L.moveNext();
		}
		return N;
	}
	
	Matrix add(Matrix M)
	{
		Matrix N = new Matrix(this.size);
		Entry e1, e2;
		
		if(this.equals(M))
		{
			N = M.scalarMult(2);
		}
		else
		{
			for (int i = 0; i < this.size; i++)
			{
				if(this.row[i].isEmpty())break;
				N.row[i] = this.listAdd(this.row[i], M.row[i]);
			}
		}
		return N;	
	}
	
	public boolean equals(Object x){
	      boolean eq  = false;
	      Matrix M;
	      Entry e1, e2;

	      if(x instanceof Matrix)
	      {
	         M = (Matrix)x; 
	         eq = (this.size==M.size);
	         if(eq == false)
	         {
	        	 return eq;
	         }
	         
	         for(int i = 0; i < this.size; i++)
	         {
	        	 if(this.row[i].isEmpty())break;
	        	 this.row[i].moveFront();
	        	 M.row[i].moveFront();
	        	 e1 = (Entry)this.row[i].get();
		         e2 = (Entry)M.row[i].get();
		         
		         while( eq && this.row[i].index()!=-1)
		         {
		            eq = e1.equals(e2);
		            e1 = (Entry)this.row[i].get();
		            e2 = (Entry)M.row[i].get();
		            System.out.println(e1);
		            System.out.println(e2);
		            System.out.println(eq);
		            this.row[i].moveNext();
		            
		         }
		       
	         
	         }
	      }
	      return eq;
	   }
	
	/*Matrix transpose()
	{
		Matrix N = new Matrix(this.size);
		Entry e1;
		for(int i = 0; i < this.size; i++)
		{
			e1 = (Entry) this.row[i].get();
			for(int j = 0; j < this.size; j++)
			{
				N.row[i].append(data);
			}
		}
		
		
		return N;
	}*/
}
